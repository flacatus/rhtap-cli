---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rhtap-install
spec:
  params:
    - name: ocp-login-command
      type: string
      description: "Command to login in the Openshift Cluster during testing."
    - name: job-spec
      description: "The konflux ci job spec metadata generated. The job spec is generated by https://github.com/konflux-ci/konflux-qe-definitions/blob/main/common/tasks/test-metadata/0.1/test-metadata.yaml"
      default: "{}"
      type: string
    - name: rhtap-cli-container
      default: "quay.io/rhtap/rhtap-cli:latest"
      type: string
      description: "CLI container."
  volumes:
    - name: rhtap-cli-volume
      secret:
        secretName: rhtap-cli-install
  steps:
    - name: get-rhtap-cli-manifests-from-build
      image: $(params.rhtap-cli-container)
      workingDir: /workspace
      command:
        - /bin/sh
      args:
        - -c
        - |
          mkdir -p /tmp/rhtap-cli && \
          cp -r /rhtap-cli/* /tmp/rhtap-cli/ && \
          mv /tmp/rhtap-cli /workspace/ || { echo "Failed to copy and move files"; exit 1; }
    - name: install-rhtap
      env:
        - name: JOB_SPEC
          value: $(params.job-spec)
      image: quay.io/rhtap/rhtap-e2e:latest
      workingDir: /workspace
      volumeMounts:
        - name: rhtap-cli-volume
          mountPath: /usr/local/rhtap-cli-install
      script: |
        #!/bin/sh
        set -euo pipefail

        # Create a placeholder kubeconfig file
        touch kubeconfig

        # Set the KUBECONFIG environment variable to point to the new file
        export KUBECONFIG=$(pwd)/kubeconfig
        $(params.ocp-login-command)
        cat $(pwd)/kubeconfig

        chmod -R 777 /workspace
        cd /workspace/rhtap-cli

        if [[ -f /workspace/rhtap-cli/rhtap-cli ]]; then
          cp /workspace/rhtap-cli/rhtap-cli /usr/local/bin
        else
          echo "[ERROR] rhtap-cli not found in '/workspace/rhtap-cli'"
          exit 1
        fi

        echo "[DEBUG] Task running with the following JOB_SPEC env:"
        echo -e "$JOB_SPEC"

        # Extract required values from JOB_SPEC
        GIT_REPO="$(echo "$JOB_SPEC" | jq -r '.git.git_repo')"
        SOURCE_REPO_URL="$(echo "$JOB_SPEC" | jq -r '.git.source_repo_url' | sed 's#https://github.com/##')"
        SOURCE_REPO_BRANCH="$(echo "$JOB_SPEC" | jq -r '.git.source_repo_branch')"

        # Log the extracted values
        echo "[INFO] GIT_REPO is set to '$GIT_REPO'"
        echo "[INFO] SOURCE_REPO_URL is set to '$SOURCE_REPO_URL'"
        echo "[INFO] SOURCE_REPO_BRANCH is set to '$SOURCE_REPO_BRANCH'"

        # Validate extracted variables
        if [[ -z "$GIT_REPO" || -z "$SOURCE_REPO_URL" || -z "$SOURCE_REPO_BRANCH" ]]; then
          echo "[ERROR] One or more required variables are missing."
          exit 1
        fi

        # Execute a specific script based on the value of GIT_REPO
        if [[ "$GIT_REPO" == "rhtap-cli" ]]; then
          echo "[INFO] Installing rhtap for '$GIT_REPO' repository..."

          # Download and run the script from the source repository
          bash -c "$(curl -fsSL "https://raw.githubusercontent.com/$SOURCE_REPO_URL/$SOURCE_REPO_BRANCH/integration-tests/scripts/rhtap-cli-runner.sh")"
        else
          bash -c "$(curl -fsSL "https://raw.githubusercontent.com/redhat-appstudio/rhtap-cli/main/integration-tests/scripts/rhtap-cli-runner.sh")"
        fi
